Instala GSAP:
Este componente depende de la librería de animación GSAP. Necesitarás instalarla en tu proyecto.

Bash

npm install gsap
Copia y pega el código:
Pega el código del componente y el de los estilos en los archivos que creaste.

Importa el componente:
Ahora puedes importar y usar el componente LoginForm en cualquier página de tu aplicación Next.js.

JavaScript

import LoginForm from '../components/LoginForm';

export default function LoginPage() {
  return (
    <div>
      <LoginForm />
    </div>
  );
}
components/LoginForm.js
JavaScript

import React, { useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import Script from 'next/script';
import styles from './LoginForm.module.css';
import { gsap } from 'gsap';
import { MorphSVGPlugin } from 'gsap/MorphSVGPlugin';

// Registrar el plugin de MorphSVG
if (typeof window !== 'undefined') {
  gsap.registerPlugin(MorphSVGPlugin);
}

const LoginForm = () => {
  // --- Refs para todos los elementos del DOM ---
  const emailLabelRef = useRef(null);
  const emailRef = useRef(null);
  const passwordLabelRef = useRef(null);
  const passwordRef = useRef(null);
  const showPasswordCheckRef = useRef(null);
  const showPasswordToggleRef = useRef(null);
  const svgContainerRef = useRef(null);
  const twoFingersRef = useRef(null);
  const armLRef = useRef(null);
  const armRRef = useRef(null);
  const eyeLRef = useRef(null);
  const eyeRRef = useRef(null);
  const noseRef = useRef(null);
  const mouthRef = useRef(null);
  const mouthBGRef = useRef(null);
  const mouthSmallBGRef = useRef(null);
  const mouthMediumBGRef = useRef(null);
  const mouthLargeBGRef = useRef(null);
  const mouthMaskPathRef = useRef(null);
  const mouthOutlineRef = useRef(null);
  const toothRef = useRef(null);
  const tongueRef = useRef(null);
  const chinRef = useRef(null);
  const faceRef = useRef(null);
  const eyebrowRef = useRef(null);
  const outerEarLRef = useRef(null);
  const outerEarRRef = useRef(null);
  const earHairLRef = useRef(null);
  const earHairRRef = useRef(null);
  const hairRef = useRef(null);
  const bodyBGRef = useRef(null);
  const bodyBGchangedRef = useRef(null);

  // --- Variables de estado y de instancia ---
  const [passwordVisible, setPasswordVisible] = useState(false);
  const instance = useRef({
    activeElement: null,
    mouthStatus: 'small',
    eyeScale: 1,
    eyesCovered: false,
    blinking: null,
  }).current;

  // --- Lógica de Animación y Eventos en useEffect ---
  useEffect(() => {
    // --- Referencias a elementos .current ---
    const email = emailRef.current;
    const password = passwordRef.current;
    const mySVG = svgContainerRef.current;
    const armL = armLRef.current;
    const armR = armRRef.current;
    const eyeL = eyeLRef.current;
    const eyeR = eyeRRef.current;
    const nose = noseRef.current;
    const mouth = mouthRef.current;
    const mouthBG = mouthBGRef.current;
    const mouthSmallBG = mouthSmallBGRef.current;
    const mouthMediumBG = mouthMediumBGRef.current;
    const mouthLargeBG = mouthLargeBGRef.current;
    const mouthMaskPath = mouthMaskPathRef.current;
    const mouthOutline = mouthOutlineRef.current;
    const tooth = toothRef.current;
    const tongue = tongueRef.current;
    const chin = chinRef.current;
    const face = faceRef.current;
    const eyebrow = eyebrowRef.current;
    const outerEarL = outerEarLRef.current;
    const outerEarR = outerEarRRef.current;
    const earHairL = earHairLRef.current;
    const earHairR = earHairRRef.current;
    const hair = hairRef.current;
    const bodyBG = bodyBGRef.current;
    const bodyBGchanged = bodyBGchangedRef.current;
    const twoFingers = twoFingersRef.current;
    
    let emailScrollMax;
    let eyeLCoords, eyeRCoords, noseCoords, mouthCoords, svgCoords, emailCoords, screenCenter;

    const getPosition = (el) => {
        let xPos = 0;
        let yPos = 0;
        while (el) {
            xPos += (el.offsetLeft - el.scrollLeft + el.clientLeft);
            yPos += (el.offsetTop - el.scrollTop + el.clientTop);
            el = el.offsetParent;
        }
        return { x: xPos, y: yPos };
    };
    
    const getAngle = (x1, y1, x2, y2) => Math.atan2(y1 - y2, x1 - x2);

    const calculateFaceMove = () => {
        const carPos = email.selectionEnd || email.value.length;
        const div = document.createElement('div');
        const span = document.createElement('span');
        const copyStyle = getComputedStyle(email);
        
        Object.keys(copyStyle).forEach(prop => {
            div.style[prop] = copyStyle[prop];
        });
        div.style.position = 'absolute';
        document.body.appendChild(div);
        div.textContent = email.value.substr(0, carPos);
        span.textContent = email.value.substr(carPos) || '.';
        div.appendChild(span);

        const caretCoords = getPosition(span);
        const dFromC = screenCenter - (caretCoords.x + emailCoords.x);

        let eyeLAngle, eyeRAngle, noseAngle, mouthAngle;

        if (email.scrollWidth <= emailScrollMax) {
            eyeLAngle = getAngle(eyeLCoords.x, eyeLCoords.y, emailCoords.x + caretCoords.x, emailCoords.y + 25);
            eyeRAngle = getAngle(eyeRCoords.x, eyeRCoords.y, emailCoords.x + caretCoords.x, emailCoords.y + 25);
            noseAngle = getAngle(noseCoords.x, noseCoords.y, emailCoords.x + caretCoords.x, emailCoords.y + 25);
            mouthAngle = getAngle(mouthCoords.x, mouthCoords.y, emailCoords.x + caretCoords.x, emailCoords.y + 25);
        } else {
            eyeLAngle = getAngle(eyeLCoords.x, eyeLCoords.y, emailCoords.x + emailScrollMax, emailCoords.y + 25);
            eyeRAngle = getAngle(eyeRCoords.x, eyeRCoords.y, emailCoords.x + emailScrollMax, emailCoords.y + 25);
            noseAngle = getAngle(noseCoords.x, noseCoords.y, emailCoords.x + emailScrollMax, emailCoords.y + 25);
            mouthAngle = getAngle(mouthCoords.x, mouthCoords.y, emailCoords.x + emailScrollMax, emailCoords.y + 25);
        }

        const eyeLX = Math.cos(eyeLAngle) * 20;
        const eyeLY = Math.sin(eyeLAngle) * 10;
        const eyeRX = Math.cos(eyeRAngle) * 20;
        const eyeRY = Math.sin(eyeRAngle) * 10;
        const noseX = Math.cos(noseAngle) * 23;
        const noseY = Math.sin(noseAngle) * 10;
        const mouthX = Math.cos(mouthAngle) * 23;
        const mouthY = Math.sin(mouthAngle) * 10;
        const mouthR = Math.cos(mouthAngle) * 6;
        const chinX = mouthX * 0.8;
        const chinY = mouthY * 0.5;
        let chinS = 1 - (dFromC * 0.15) / 100;
        if (chinS > 1) chinS = 1 - (chinS - 1);
        if (chinS < 0.5) chinS = 0.5;
        const faceX = mouthX * 0.3;
        const faceY = mouthY * 0.4;
        const faceSkew = Math.cos(mouthAngle) * 5;
        const eyebrowSkew = Math.cos(mouthAngle) * 25;
        const outerEarX = Math.cos(mouthAngle) * 4;
        const outerEarY = Math.cos(mouthAngle) * 5;
        const hairX = Math.cos(mouthAngle) * 6;

        gsap.to(eyeL, { duration: 1, x: -eyeLX, y: -eyeLY, ease: 'expo.out' });
        gsap.to(eyeR, { duration: 1, x: -eyeRX, y: -eyeRY, ease: 'expo.out' });
        gsap.to(nose, { duration: 1, x: -noseX, y: -noseY, rotation: mouthR, transformOrigin: 'center center', ease: 'expo.out' });
        gsap.to(mouth, { duration: 1, x: -mouthX, y: -mouthY, rotation: mouthR, transformOrigin: 'center center', ease: 'expo.out' });
        gsap.to(chin, { duration: 1, x: -chinX, y: -chinY, scaleY: chinS, ease: 'expo.out' });
        gsap.to(face, { duration: 1, x: -faceX, y: -faceY, skewX: -faceSkew, transformOrigin: 'center top', ease: 'expo.out' });
        gsap.to(eyebrow, { duration: 1, x: -faceX, y: -faceY, skewX: -eyebrowSkew, transformOrigin: 'center top', ease: 'expo.out' });
        gsap.to(outerEarL, { duration: 1, x: outerEarX, y: -outerEarY, ease: 'expo.out' });
        gsap.to(outerEarR, { duration: 1, x: outerEarX, y: outerEarY, ease: 'expo.out' });
        gsap.to(earHairL, { duration: 1, x: -outerEarX, y: -outerEarY, ease: 'expo.out' });
        gsap.to(earHairR, { duration: 1, x: -outerEarX, y: outerEarY, ease: 'expo.out' });
        gsap.to(hair, { duration: 1, x: hairX, scaleY: 1.2, transformOrigin: 'center bottom', ease: 'expo.out' });

        document.body.removeChild(div);
    };

    const resetFace = () => {
        gsap.to([eyeL, eyeR, nose, mouth, chin, face, eyebrow, outerEarL, outerEarR, earHairL, earHairR, hair], {
            duration: 1,
            x: 0,
            y: 0,
            scaleX: 1,
            scaleY: 1,
            rotation: 0,
            skewX: 0,
            ease: 'expo.out',
        });
    };
    
    const startBlinking = (delay = 1) => {
        const blink = () => {
            instance.blinking = gsap.to([eyeL, eyeR], {
                duration: 0.1,
                scaleY: 0,
                yoyo: true,
                repeat: 1,
                transformOrigin: 'center center',
                delay: Math.random() * (delay || 5),
                onComplete: blink,
            });
        };
        blink();
    };

    const stopBlinking = () => {
        if (instance.blinking) instance.blinking.kill();
        gsap.set([eyeL, eyeR], { scaleY: instance.eyeScale });
    };

    const coverEyes = () => {
        if (instance.eyesCovered) return;
        gsap.killTweensOf([armL, armR]);
        gsap.set([armL, armR], { visibility: 'visible' });
        gsap.to(armL, { duration: 0.45, x: -93, y: 10, rotation: 0, ease: 'quad.out' });
        gsap.to(armR, { duration: 0.45, x: -93, y: 10, rotation: 0, ease: 'quad.out', delay: 0.1 });
        gsap.to(bodyBG, { duration: 0.45, morphSVG: bodyBGchanged, ease: 'quad.out' });
        instance.eyesCovered = true;
        stopBlinking();
    };

    const uncoverEyes = () => {
        if (!instance.eyesCovered) return;
        gsap.killTweensOf([armL, armR]);
        gsap.to(armL, { duration: 1.35, y: 220, rotation: 105, ease: 'quad.out' });
        gsap.to(armR, {
            duration: 1.35, y: 220, rotation: -105, ease: 'quad.out', delay: 0.1, onComplete: () => {
                gsap.set([armL, armR], { visibility: 'hidden' });
            }
        });
        gsap.to(bodyBG, { duration: 0.45, morphSVG: bodyBG, ease: 'quad.out' });
        instance.eyesCovered = false;
        startBlinking();
    };
    
    // --- Handlers ---
    const onEmailInput = () => {
        calculateFaceMove();
        const value = email.value;
        if (value.length > 0) {
            if (instance.mouthStatus === "small") {
                instance.mouthStatus = "medium";
                gsap.to([mouthBG, mouthOutline, mouthMaskPath], { duration: 1, morphSVG: mouthMediumBG, ease: 'expo.out' });
                gsap.to([eyeL, eyeR], { duration: 1, scale: 0.85, ease: 'expo.out' });
                instance.eyeScale = 0.85;
            }
            if (value.includes('@') && value.includes('.')) {
                instance.mouthStatus = "large";
                gsap.to([mouthBG, mouthOutline, mouthMaskPath], { duration: 1, morphSVG: mouthLargeBG, ease: 'expo.out' });
                gsap.to(tooth, { duration: 1, x: 3, y: -2, ease: 'expo.out' });
                gsap.to(tongue, { duration: 1, y: 2, ease: 'expo.out' });
                gsap.to([eyeL, eyeR], { duration: 1, scale: 0.65, ease: 'expo.out' });
                instance.eyeScale = 0.65;
            }
        } else {
            instance.mouthStatus = "small";
            gsap.to([mouthBG, mouthOutline, mouthMaskPath], { duration: 1, morphSVG: mouthSmallBG, ease: 'expo.out' });
            gsap.to([eyeL, eyeR], { duration: 1, scale: 1, ease: 'expo.out' });
            instance.eyeScale = 1;
        }
    };
    
    const onEmailFocus = (e) => {
        instance.activeElement = "email";
        e.target.parentElement.classList.add(styles.focusWithText);
        stopBlinking();
        onEmailInput();
    };

    const onEmailBlur = (e) => {
        instance.activeElement = null;
        if (e.target.value === "") {
            e.target.parentElement.classList.remove(styles.focusWithText);
        }
        startBlinking();
        resetFace();
    };

    const onPasswordFocus = () => {
        instance.activeElement = "password";
        coverEyes();
    };

    const onPasswordBlur = () => {
        instance.activeElement = null;
        // Solo descubrir si el foco no se movió a otro elemento interactivo
        setTimeout(() => {
            if (instance.activeElement !== "password" && instance.activeElement !== "toggle") {
                uncoverEyes();
            }
        }, 100);
    };

    const onPasswordToggleFocus = () => {
        instance.activeElement = "toggle";
        coverEyes();
    };
     const onPasswordToggleBlur = () => {
        instance.activeElement = null;
        setTimeout(() => {
            if (instance.activeElement !== "password" && instance.activeElement !== "toggle") {
                uncoverEyes();
            }
        }, 100);
    };

    const onPasswordToggleChange = (e) => {
        setPasswordVisible(e.target.checked);
        if (e.target.checked) {
            gsap.to(twoFingers, { duration: 0.35, transformOrigin: 'bottom left', rotation: 30, x: -9, y: -2, ease: 'power2.inOut' });
        } else {
            gsap.to(twoFingers, { duration: 0.35, transformOrigin: 'bottom left', rotation: 0, x: 0, y: 0, ease: 'power2.inOut' });
        }
    };

    // --- Init ---
    const init = () => {
        svgCoords = getPosition(mySVG);
        emailCoords = getPosition(email);
        screenCenter = svgCoords.x + mySVG.offsetWidth / 2;
        eyeLCoords = { x: svgCoords.x + 84, y: svgCoords.y + 76 };
        eyeRCoords = { x: svgCoords.x + 113, y: svgCoords.y + 76 };
        noseCoords = { x: svgCoords.x + 97, y: svgCoords.y + 81 };
        mouthCoords = { x: svgCoords.x + 100, y: svgCoords.y + 100 };
        emailScrollMax = email.scrollWidth;

        gsap.set(armL, { x: -93, y: 220, rotation: 105, transformOrigin: 'top left', visibility: 'hidden' });
        gsap.set(armR, { x: -93, y: 220, rotation: -105, transformOrigin: 'top right', visibility: 'hidden' });
        gsap.set(mouth, { transformOrigin: 'center center' });

        startBlinking();

        email.addEventListener('focus', onEmailFocus);
        email.addEventListener('blur', onEmailBlur);
        email.addEventListener('input', onEmailInput);

        password.addEventListener('focus', onPasswordFocus);
        password.addEventListener('blur', onPasswordBlur);
        
        const check = showPasswordCheckRef.current;
        check.addEventListener('change', onPasswordToggleChange);
        check.addEventListener('focus', onPasswordToggleFocus);
        check.addEventListener('blur', onPasswordToggleBlur);
    };

    init();

    return () => {
      // --- Cleanup ---
      if (instance.blinking) instance.blinking.kill();
      email.removeEventListener('focus', onEmailFocus);
      email.removeEventListener('blur', onEmailBlur);
      email.removeEventListener('input', onEmailInput);
      password.removeEventListener('focus', onPasswordFocus);
      password.removeEventListener('blur', onPasswordBlur);
      const check = showPasswordCheckRef.current;
      if (check) {
          check.removeEventListener('change', onPasswordToggleChange);
          check.removeEventListener('focus', onPasswordToggleFocus);
          check.removeEventListener('blur', onPasswordToggleBlur);
      }
    };
  }, []); // El array vacío asegura que se ejecute solo una vez

  return (
    <>
      <Head>
        <title>Login Form</title>
        <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600,700" rel="stylesheet" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <form className={styles.form} onSubmit={(e) => e.preventDefault()}>
        <div ref={svgContainerRef} className={styles.svgContainer}>
          <div>
            {/* El SVG ahora es parte del componente JSX */}
            <svg className={styles.mySVG} xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" viewBox="0 0 200 200">
                <defs>
                    <circle id="armMaskPath" cx="100" cy="100" r="100" />
                </defs>
                <clipPath id="armMask">
                    <use xlinkHref="#armMaskPath" overflow="visible" />
                </clipPath>
                <circle cx="100" cy="100" r="100" fill="#a9ddf3" />
                <g className={styles.body}>
                    <path ref={bodyBGchangedRef} className={styles.bodyBGchanged} style={{ display: 'none' }} fill="#FFFFFF" d="M200,122h-35h-14.9V72c0-27.6-22.4-50-50-50s-50,22.4-50,50v50H35.8H0l0,91h200L200,122z" />
                    <path ref={bodyBGRef} className={styles.bodyBGnormal} stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" fill="#FFFFFF" d="M200,158.5c0-20.2-14.8-36.5-35-36.5h-14.9V72.8c0-27.4-21.7-50.4-49.1-50.8c-28-0.5-50.9,22.1-50.9,50v50 H35.8C16,122,0,138,0,157.8L0,213h200L200,158.5z" />
                    <path fill="#DDF1FA" d="M100,156.4c-22.9,0-43,11.1-54.1,27.7c15.6,10,34.2,15.9,54.1,15.9s38.5-5.8,54.1-15.9 C143,167.5,122.9,156.4,100,156.4z" />
                </g>
                <g ref={outerEarLRef} className="earL">
                    <g className="outerEar" fill="#ddf1fa" stroke="#3a5e77" strokeWidth="2.5">
                        <circle cx="47" cy="83" r="11.5" />
                        <path d="M46.3 78.9c-2.3 0-4.1 1.9-4.1 4.1 0 2.3 1.9 4.1 4.1 4.1" strokeLinecap="round" strokeLinejoin="round" />
                    </g>
                    <g ref={earHairLRef} className="earHair">
                        <rect x="51" y="64" fill="#FFFFFF" width="15" height="35" />
                        <path d="M53.4 62.8C48.5 67.4 45 72.2 42.8 77c3.4-.1 6.8-.1 10.1.1-4 3.7-6.8 7.6-8.2 11.6 2.1 0 4.2 0 6.3.2-2.6 4.1-3.8 8.3-3.7 12.5 1.2-.7 3.4-1.4 5.2-1.9" fill="#fff" stroke="#3a5e77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" />
                    </g>
                </g>
                <g ref={outerEarRRef} className="earR">
                     <g className="outerEar">
                        <circle fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" cx="153" cy="83" r="11.5" />
                        <path fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" d="M153.7,78.9 c2.3,0,4.1,1.9,4.1,4.1c0,2.3-1.9,4.1-4.1,4.1" />
                    </g>
                    <g ref={earHairRRef} className="earHair">
                        <rect x="134" y="64" fill="#FFFFFF" width="15" height="35" />
                        <path fill="#FFFFFF" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" d="M146.6,62.8 c4.9,4.6,8.4,9.4,10.6,14.2c-3.4-0.1-6.8-0.1-10.1,0.1c4,3.7,6.8,7.6,8.2,11.6c-2.1,0-4.2,0-6.3,0.2c2.6,4.1,3.8,8.3,3.7,12.5 c-1.2-0.7-3.4-1.4-5.2-1.9" />
                    </g>
                </g>
                <path ref={chinRef} className="chin" d="M84.1 121.6c2.7 2.9 6.1 5.4 9.8 7.5l.9-4.5c2.9 2.5 6.3 4.8 10.2 6.5 0-1.9-.1-3.9-.2-5.8 3 1.2 6.2 2 9.7 2.5-.3-2.1-.7-4.1-1.2-6.1" fill="none" stroke="#3a5e77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" />
                <path ref={faceRef} className="face" fill="#DDF1FA" d="M134.5,46v35.5c0,21.815-15.446,39.5-34.5,39.5s-34.5-17.685-34.5-39.5V46" />
                <path ref={hairRef} className="hair" fill="#FFFFFF" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" d="M81.457,27.929 c1.755-4.084,5.51-8.262,11.253-11.77c0.979,2.565,1.883,5.14,2.712,7.723c3.162-4.265,8.626-8.27,16.272-11.235 c-0.737,3.293-1.588,6.573-2.554,9.837c4.857-2.116,11.049-3.64,18.428-4.156c-2.403,3.23-5.021,6.391-7.852,9.474" />
                <g ref={eyebrowRef} className="eyebrow">
                    <path fill="#FFFFFF" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" d="M63.56,55.102 c6.243,5.624,13.38,10.614,21.296,14.738c2.071-2.785,4.01-5.626,5.816-8.515c4.537,3.785,9.583,7.263,15.097,10.329 c1.197-3.043,2.287-6.104,3.267-9.179c4.087,2.004,8.427,3.761,12.996,5.226c0.545-3.348,0.986-6.696,1.322-10.037 c4.913-0.481,9.857-1.34,14.787-2.599" />
                </g>
                <g ref={eyeLRef} className="eyeL">
                    <circle cx="85.5" cy="78.5" r="3.5" fill="#3a5e77" />
                    <circle cx="84" cy="76" r="1" fill="#fff" />
                </g>
                <g ref={eyeRRef} className="eyeR">
                    <circle cx="114.5" cy="78.5" r="3.5" fill="#3a5e77" />
                    <circle cx="113" cy="76" r="1" fill="#fff" />
                </g>
                <g ref={mouthRef} className="mouth">
                    <path ref={mouthBGRef} className="mouthBG" fill="#617E92" d="M100.2,101c-0.4,0-1.4,0-1.8,0c-2.7-0.3-5.3-1.1-8-2.5c-0.7-0.3-0.9-1.2-0.6-1.8 c0.2-0.5,0.7-0.7,1.2-0.7c0.2,0,0.5,0.1,0.6,0.2c3,1.5,5.8,2.3,8.6,2.3s5.7-0.7,8.6-2.3c0.2-0.1,0.4-0.2,0.6-0.2 c0.5,0,1,0.3,1.2,0.7c0.4,0.7,0.1,1.5-0.6,1.9c-2.6,1.4-5.3,2.2-7.9,2.5C101.7,101,100.5,101,100.2,101z" />
                    <path ref={mouthSmallBGRef} style={{ display: 'none' }} className="mouthSmallBG" fill="#617E92" d="M100.2,101c-0.4,0-1.4,0-1.8,0c-2.7-0.3-5.3-1.1-8-2.5c-0.7-0.3-0.9-1.2-0.6-1.8 c0.2-0.5,0.7-0.7,1.2-0.7c0.2,0,0.5,0.1,0.6,0.2c3,1.5,5.8,2.3,8.6,2.3s5.7-0.7,8.6-2.3c0.2-0.1,0.4-0.2,0.6-0.2 c0.5,0,1,0.3,1.2,0.7c0.4,0.7,0.1,1.5-0.6,1.9c-2.6,1.4-5.3,2.2-7.9,2.5C101.7,101,100.5,101,100.2,101z" />
                    <path ref={mouthMediumBGRef} style={{ display: 'none' }} className="mouthMediumBG" d="M95,104.2c-4.5,0-8.2-3.7-8.2-8.2v-2c0-1.2,1-2.2,2.2-2.2h22c1.2,0,2.2,1,2.2,2.2v2 c0,4.5-3.7,8.2-8.2,8.2H95z" />
                    <path ref={mouthLargeBGRef} style={{ display: 'none' }} className="mouthLargeBG" d="M100 110.2c-9 0-16.2-7.3-16.2-16.2 0-2.3 1.9-4.2 4.2-4.2h24c2.3 0 4.2 1.9 4.2 4.2 0 9-7.2 16.2-16.2 16.2z" fill="#617e92" stroke="#3a5e77" strokeLinejoin="round" strokeWidth="2.5" />
                    <defs>
                        <path ref={mouthMaskPathRef} id="mouthMaskPath" d="M100.2,101c-0.4,0-1.4,0-1.8,0c-2.7-0.3-5.3-1.1-8-2.5c-0.7-0.3-0.9-1.2-0.6-1.8 c0.2-0.5,0.7-0.7,1.2-0.7c0.2,0,0.5,0.1,0.6,0.2c3,1.5,5.8,2.3,8.6,2.3s5.7-0.7,8.6-2.3c0.2-0.1,0.4-0.2,0.6-0.2 c0.5,0,1,0.3,1.2,0.7c0.4,0.7,0.1,1.5-0.6,1.9c-2.6,1.4-5.3,2.2-7.9,2.5C101.7,101,100.5,101,100.2,101z" />
                    </defs>
                    <clipPath id="mouthMask">
                        <use xlinkHref="#mouthMaskPath" overflow="visible" />
                    </clipPath>
                    <g clipPath="url(#mouthMask)">
                        <g ref={tongueRef} className="tongue">
                            <circle cx="100" cy="107" r="8" fill="#cc4a6c" />
                            <ellipse className="tongueHighlight" cx="100" cy="100.5" rx="3" ry="1.5" opacity=".1" fill="#fff" />
                        </g>
                    </g>
                    <path ref={toothRef} clipPath="url(#mouthMask)" className="tooth" style={{ fill: '#FFFFFF' }} d="M106,97h-4c-1.1,0-2-0.9-2-2v-2h8v2C108,96.1,107.1,97,106,97z" />
                    <path ref={mouthOutlineRef} className="mouthOutline" fill="none" stroke="#3A5E77" strokeWidth="2.5" strokeLinejoin="round" d="M100.2,101c-0.4,0-1.4,0-1.8,0c-2.7-0.3-5.3-1.1-8-2.5c-0.7-0.3-0.9-1.2-0.6-1.8 c0.2-0.5,0.7-0.7,1.2-0.7c0.2,0,0.5,0.1,0.6,0.2c3,1.5,5.8,2.3,8.6,2.3s5.7-0.7,8.6-2.3c0.2-0.1,0.4-0.2,0.6-0.2 c0.5,0,1,0.3,1.2,0.7c0.4,0.7,0.1,1.5-0.6,1.9c-2.6,1.4-5.3,2.2-7.9,2.5C101.7,101,100.5,101,100.2,101z" />
                </g>
                <path ref={noseRef} className="nose" d="M97.7 79.9h4.7c1.9 0 3 2.2 1.9 3.7l-2.3 3.3c-.9 1.3-2.9 1.3-3.8 0l-2.3-3.3c-1.3-1.6-.2-3.7 1.8-3.7z" fill="#3a5e77" />
                <g className="arms" clipPath="url(#armMask)">
                    <g ref={armLRef} className="armL" style={{ visibility: 'hidden' }}>
                       <polygon points="121.3,98.4 111,59.7 149.8,49.3 169.8,85.4" fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" strokeMiterlimit="10"/>
                       <path d="M134.4,53.5l19.3-5.2c2.7-0.7,5.4,0.9,6.1,3.5v0c0.7,2.7-0.9,5.4-3.5,6.1l-10.3,2.8" fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" strokeMiterlimit="10"/>
                       <path d="M150.9,59.4l26-7c2.7-0.7,5.4,0.9,6.1,3.5v0c0.7,2.7-0.9,5.4-3.5,6.1l-21.3,5.7" fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" strokeMiterlimit="10"/>
                        <g ref={twoFingersRef} className="twoFingers">
                            <path d="M158.3,67.8l23.1-6.2c2.7-0.7,5.4,0.9,6.1,3.5v0c0.7,2.7-0.9,5.4-3.5,6.1l-23.1,6.2" fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" strokeMiterlimit="10"/>
                            <path d="M160.8,77.5l19.4-5.2c2.7-0.7,5.4,0.9,6.1,3.5v0c0.7,2.7-0.9,5.4-3.5,6.1l-18.3,4.9" fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" strokeMiterlimit="10"/>
                        </g>
                    </g>
                    <g ref={armRRef} className="armR" style={{ visibility: 'hidden' }}>
                      <path d="M78.7,98.4l10.3-38.7-38.8-10.4-20,36.1" fill="#DDF1FA" stroke="#3A5E77" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" strokeMiterlimit="10"/>
                    </g>
                </g>
            </svg>
          </div>
        </div>

        <div className={`${styles.inputGroup} ${styles.inputGroup1}`}>
          <label ref={emailLabelRef} htmlFor="loginEmail" id="loginEmailLabel">Email</label>
          <input ref={emailRef} type="email" id="loginEmail" maxLength="254" />
          <p className={`${styles.helper} ${styles.helper1}`}>email@domain.com</p>
        </div>
        
        <div className={`${styles.inputGroup} ${styles.inputGroup2}`}>
          <label ref={passwordLabelRef} htmlFor="loginPassword" id="loginPasswordLabel">Password</label>
          <input ref={passwordRef} type={passwordVisible ? "text" : "password"} id="loginPassword" />
          <label ref={showPasswordToggleRef} id={styles.showPasswordToggle} htmlFor="showPasswordCheck">
            Show
            <input ref={showPasswordCheckRef} id="showPasswordCheck" type="checkbox" />
            <div className={styles.indicator}></div>
          </label>
        </div>
        
        <div className={`${styles.inputGroup} ${styles.inputGroup3}`}>
          <button id="login">Log in</button>
        </div>
      </form>
    </>
  );
};

export default LoginForm;
components/LoginForm.module.css
CSS

/* colors */
:root {
  --dark-blue: #217093;
  --med-blue: #4eb8dd;
  --light-blue: #ddf1fa;
  --input-bg: #f3fafd;
}

.form {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: block;
  width: 100%;
  max-width: 400px;
  background-color: #fff;
  margin: 0;
  padding: 2.25em;
  box-sizing: border-box;
  border: solid 1px #ddd;
  border-radius: 0.5em;
  font-family: 'Source Sans Pro', sans-serif;
}

.svgContainer {
  position: relative;
  width: 200px;
  height: 200px;
  margin: 0 auto 1em;
  border-radius: 50%;
  pointer-events: none;
}

.svgContainer > div {
  position: relative;
  width: 100%;
  height: 0;
  overflow: hidden;
  border-radius: 50%;
  padding-bottom: 100%;
}

.mySVG {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.svgContainer:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  z-index: 10;
  width: inherit;
  height: inherit;
  box-sizing: border-box;
  border: solid 2.5px var(--dark-blue);
  border-radius: 50%;
}

.inputGroup {
  margin: 0 0 2em;
  padding: 0;
  position: relative;
}

.inputGroup:last-of-type {
  margin-bottom: 0;
}

.inputGroup label {
  margin: 0 0 12px;
  display: block;
  font-size: 1.25em;
  color: #217093;
  font-weight: 700;
  font-family: inherit;
}

.inputGroup input[type='email'],
.inputGroup input[type='text'],
.inputGroup input[type='password'] {
  display: block;
  margin: 0;
  padding: 0.875em 1em 0;
  background-color: var(--input-bg);
  border: solid 2px var(--dark-blue);
  border-radius: 4px;
  -webkit-appearance: none;
  box-sizing: border-box;
  width: 100%;
  height: 65px;
  font-size: 1.55em;
  color: #353538;
  font-weight: 600;
  font-family: inherit;
  transition: box-shadow 0.2s linear, border-color 0.25s ease-out;
}

.inputGroup input[type='email']:focus,
.inputGroup input[type='text']:focus,
.inputGroup input[type='password']:focus {
  outline: none;
  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
  border: solid 2px var(--med-blue);
}

.inputGroup button {
  display: block;
  margin: 0;
  padding: 0.65em 1em 1em;
  background-color: var(--med-blue);
  border: none;
  border-radius: 4px;
  box-sizing: border-box;
  box-shadow: none;
  width: 100%;
  height: 65px;
  font-size: 1.55em;
  color: #fff;
  font-weight: 600;
  font-family: inherit;
  cursor: pointer;
  transition: background-color 0.2s ease-out;
}

.inputGroup button:hover,
.inputGroup button:active {
  background-color: var(--dark-blue);
}

.inputGroup1 .helper {
  position: absolute;
  z-index: 1;
  font-family: inherit;
}

.inputGroup1 .helper1 {
  top: 0;
  left: 0;
  transform: translate(1em, 2.2em) scale(1);
  transform-origin: 0 0;
  color: var(--dark-blue);
  font-size: 1.55em;
  font-weight: 400;
  opacity: 0.65;
  pointer-events: none;
  transition: transform 0.2s ease-out, opacity 0.2s linear;
}

.inputGroup1.focusWithText .helper {
  transform: translate(1em, 1.55em) scale(0.6);
  opacity: 1;
}

.inputGroup2 input[type='password'] {
  padding: 0.4em 1em 0.5em;
}

.inputGroup2 input[type='text'] {
  padding: 0.4em 1em 0.5em; /* Ajustado para coincidir */
}

#showPasswordToggle {
  display: block;
  padding: 0 0 0 1.45em;
  position: absolute;
  top: 0.25em;
  right: 0;
  font-size: 1em;
  cursor: pointer;
}

#showPasswordToggle input {
  position: absolute;
  z-index: -1;
  opacity: 0;
}

.indicator {
  position: absolute;
  top: 0;
  left: 0;
  height: 0.85em;
  width: 0.85em;
  background-color: var(--input-bg);
  border: solid 2px var(--dark-blue);
  border-radius: 3px;
}

.indicator:after {
  content: '';
  position: absolute;
  left: 0.25em;
  top: 0.025em;
  width: 0.2em;
  height: 0.5em;
  border: solid var(--dark-blue);
  border-width: 0 3px 3px 0;
  transform: rotate(45deg);
  visibility: hidden;
}

#showPasswordToggle input:checked ~ .indicator:after {
  visibility: visible;
}

#showPasswordToggle input:focus ~ .indicator,
#showPasswordToggle input:hover ~ .indicator {
  border-color: var(--med-blue);
}